<?php
/**
 * Created by PhpStorm.
 * User: Gabriel
 * Date: 15/02/2017
 * Time: 04:25 PM
 */

namespace DAO;


class ArchivoDAO extends CoreDAO
{

    protected $config;

    public function __construct($db, $table,$config=array())
    {

        $this->config =$config;
        parent::__construct($db, $table);



    }

  function getPager($limit, $actualPage, $paddingPages)
  {
      return parent::getPager($limit, $actualPage, $paddingPages); // TODO: Change the autogenerated stub
  }

    function setConfig($config)
    {
        $this->config =$config;
    }


    function upload($files,$object)
    {


        $dir=$this->config["dir"];
        if($this->config["dateformat"])
        {
            $dir.=date($this->config["dateformat"]);
        }
        $files =uploadFiles($files,$dir,$this->config);

        $uploadedFiles=array();


        if($files["success"])
        {
            foreach($files["success"] as $file)
            {

                $file=json_encode($file);

                $archivo = array(
                    "archivo_repositorio"=>$this->config["repositorio"],
                    "archivo_data"=>$file
                );

                foreach ($object as $k=>$v)
                {
                    $archivo[$k]=$v;
                }


                $uploadedFiles[]= $this->upsert($archivo);//parent::upsert($archivo);
            }
        }



            return $files;


    }
    function upsert($object,ArchivoDAO $archivoData=null)
    {
        return parent::upsert($object,$archivoData);
    }

    function delete($object)
    {

     $object=$this->read($object);

        foreach($object as $k=>$v)
        {
            foreach($v as $clave =>$valor)
            {

                       $folder=$valor["archivo_data"]["folder"];



                        if(deleteDir($folder,$this->config))
                        {

                            return parent::delete(array($this->idField=>$clave));
                        }


            }

        }



        return false;
        


    }

    function read($object =array(),$sqlExtra="",$offset=0,$limit=false)
    {

        $result=array();

        $sql="SELECT * FROM {$this->table} ";

        $countSql="SELECT count(*) as 'total' FROM {$this->table} ";

        if(count($object)>0)
        {
            $sql.=" WHERE ";

            $countSql.=" WHERE";
            foreach ($object as $k=>$v)
            {
                $sql.=" {$k}={$v} AND";

                $countSql.=" {$k}={$v} AND";
            }
            $sql = rtrim($sql,"AND");
            $countSql= rtrim($countSql,"AND");
        }
        $sql.=" {$sqlExtra}";
        $countSql.= " {$sqlExtra}";


       $this->resultNumber= $this->db->query($countSql)->fetch_all(true)[0]["total"];

        if($limit)
        {


            $offset = $offset*$limit;

            $sql.=" LIMIT {$limit} OFFSET {$offset}";

        }


        if($res=  $this->db->query($sql))
        {

            $res= $res->fetch_all(1);

            foreach ($res as $item)
            {


                $result[$item["archivo_repositorio"]][$item["archivo_id"]]["archivo_id"]=$item["archivo_id"];
                $result[$item["archivo_repositorio"]][$item["archivo_id"]]["archivo_data"]=json_decode($item["archivo_data"],true);
                $result[$item["archivo_repositorio"]][$item["archivo_id"]]["archivo_repositorio"]=$item["archivo_repositorio"];
                $result[$item["archivo_repositorio"]][$item["archivo_id"]]["archivo_descripcion"]=$item["archivo_descripcion"];


            }

        }
        else
        {
            $result=false;
        }


        return $result;

    }

}